<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- mapper의 namespace와 Interface 경로 동일하게 설정 >> mapper 후보로 등록 -->
<mapper namespace="com.example.myapp.hr.dao.IEmpRepository">
	
	<!-- getEmpCount에 사용할 select문 mapping -->
	<select id="getEmpCount" resultType="int" parameterType="int">
		SELECT COUNT(*) FROM HR.EMPLOYEES
		<if test="deptid != null">
			WHERE DEPARTMENT_ID = #{deptid}
		</if>
		<!-- 매개변수로 받는 deptid가 있으면 WHERE절 추가(if문처럼 작성 가능) -->
	</select>

	<!-- 사원 정보 목록 반환하는 select문 mapping -->
	<select id="getEmpInfo" resultType="com.example.myapp.hr.model.EmpVO" parameterType="int">
		SELECT * FROM HR.EMPLOYEES 
		<if test="empid != null">
			WHERE EMPLOYEE_ID = #{empid}
		</if>
		<!-- 매개변수로 받는 empid가 있으면 WHERE절 추가(해당 사원 정보만) -->
	</select>
	
	<!-- insert문 mapping -->
	<insert id="insertEmp" parameterType="com.example.myapp.hr.model.EmpVO">
		INSERT INTO HR.EMPLOYEES 
		VALUES(#{employeeId}, #{firstName}, #{lastName}, #{email}, #{phoneNumber}, #{hireDate},
				#{jobId}, #{salary}, #{commissionPct}, #{managerId}, #{departmentId})
	</insert>
	
	<!-- update문 mapping -->
	<update id="updateEmp" parameterType="com.example.myapp.hr.model.EmpVO">
		UPDATE HR.EMPLOYEES 
		SET FIRST_NAME = #{firstName}, LAST_NAME = #{lastName}, EMAIL = #{email}, PHONE_NUMBER = #{phoneNumber}, 
			HIRE_DATE = #{hireDate}, JOB_ID = #{jobId}, SALARY = #{salary}, COMMISSION_PCT = #{commissionPct}, 
			MANAGER_ID = #{managerId}, DEPARTMENT_ID = #{departmentId}
		WHERE EMPLOYEE_ID = #{employeeId}
	</update>
	
	<!-- delete문 mapping -->
	<delete id="deleteEmp">
		DELETE HR.EMPLOYEES WHERE (EMPLOYEE_ID = #{empid}) AND (EMAIL = #{email})
	</delete>
	<!-- 무결성 제약조건으로 인해 employees의 행을 삭제하기 위해서는 해당 사원의 jobhistory 기록을 삭제해야 함 -->
	<delete id="deleteJobHistory" parameterType="int">
		DELETE HR.JOB_HISTORY WHERE EMPLOYEE_ID = #{empid}
	</delete>
	
	<!-- 부서ID, 직무ID, 관리자ID 목록(key=ID, value=명칭 으로 구성된 HashMap) 반환하는 select문 mapping -->
	<select id="getAllDeptId" resultType="hashmap">
		SELECT DEPARTMENT_ID AS "departmentId", DEPARTMENT_NAME AS "departmentName" FROM HR.DEPARTMENTS
	</select>
	<select id="getAllJobId" resultType="hashmap">
		SELECT JOB_ID AS "jobId", JOB_TITLE AS "jobTitle" FROM HR.JOBS
	</select>
	<select id="getAllManagerId" resultType="hashmap">
		SELECT D.MANAGER_ID AS "managerId", E.FIRST_NAME AS "firstName" 
		FROM HR.DEPARTMENTS D INNER JOIN HR.EMPLOYEES E
		ON D.MANAGER_ID = E.EMPLOYEE_ID ORDER BY D.MANAGER_ID
	</select>
</mapper>